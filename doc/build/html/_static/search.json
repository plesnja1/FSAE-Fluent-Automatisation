[{"objectID":"Home","href":"GUI_guide/boundaryconditions.html#boundary-conditions-options-menu","title":"Boundary Conditions Options Menu","text":"Boundary Conditions Options Menu\n\nBoundary conditions options menu specifies inlet velocity, wheel diameter and wheel base, radiators and fan settings."},{"objectID":"Home","href":"GUI_guide/boundaryconditions.html#inlet-velocity-ms","title":"Boundary Conditions Options Menu > Inlet velocity [m/s]","text":"Inlet velocity [m/s]\n\ntype: text win. - float\n\nInlet air velocity. Same as car speed."},{"objectID":"Home","href":"GUI_guide/boundaryconditions.html#wheel-diameter-m","title":"Boundary Conditions Options Menu > Wheel diameter [m]","text":"Wheel diameter [m]\n\ntype: text win. - float\n\nOuter wheel diameter. Used for wheel rotational speed calcualtion."},{"objectID":"Home","href":"GUI_guide/boundaryconditions.html#front-wheel-axis-origin-m-x-y-z","title":"Boundary Conditions Options Menu > Front wheel axis origin [m] (X, Y, Z)","text":"Front wheel axis origin [m] (X, Y, Z)\n\ntype: 3x text win. - float\n\nCoordinates that define front axis together with [0,1,0] vector."},{"objectID":"Home","href":"GUI_guide/boundaryconditions.html#rear-wheel-axis-origin-m-x-y-z","title":"Boundary Conditions Options Menu > Rear wheel axis origin [m] (X, Y, Z)","text":"Rear wheel axis origin [m] (X, Y, Z)\n\ntype: 3x text win. - float\n\nCoordinates that define rear axis together with [0,1,0] vector."},{"objectID":"Home","href":"GUI_guide/boundaryconditions.html#simulate-radiators","title":"Boundary Conditions Options Menu > Simulate radiators?","text":"Simulate radiators?\n\ntype: check - bool\n\nWether cad model includes a radiator which would be simulated as porous zone with power law model.\nFor more info see Porous Media Conditions"},{"objectID":"Home","href":"GUI_guide/boundaryconditions.html#radiator-c0","title":"Boundary Conditions Options Menu > Radiator C0","text":"Radiator C0\n\ntype: text win. - float\n\nC0 constant used in power law model."},{"objectID":"Home","href":"GUI_guide/boundaryconditions.html#radiator-c0","title":"Boundary Conditions Options Menu > Radiator C0","text":"Radiator C0\n\ntype: text win. - float\n\nC1 constant used in power law model."},{"objectID":"Home","href":"GUI_guide/boundaryconditions.html#simulate-fan","title":"Boundary Conditions Options Menu > Simulate fan?","text":"Simulate fan?\n\ntype: check - bool\n\nWether cad model includes a fan which would be simulated as 2d fan zone with piecewise linear pressure curve.\nFor more info see Fan Boundary Conditions"},{"objectID":"Home","href":"GUI_guide/boundaryconditions.html#fan-curve-txt-max-50-points","title":"Boundary Conditions Options Menu > Fan curve .txt (max 50 points!)","text":"Fan curve .txt (max 50 points!)\n\ntype: text win. - string\n\nString path to a .txt file that specify fan pressure curve."},{"objectID":"Home","href":"API_reference/GUI_SubClasses_API/GUI_Simulation_API.html#simulation","title":"Simulation","text":"Simulation\n\nModule servicing the simulation options menu as well as simulation settings object.\n\n\n\nclass GUI_Simulation.SimulationSett\n\nBases: Setting\n\nClass containing simulation settings of solver and models\n(Turbulence, Solver methods, Temporal settings, etc.).\n\nMethods:\n\n\n\n\n\n__init__()\n\nAssigns default values.\n\n\n\nclass GUI_Simulation.Simulation(parent, controller)\n\nBases: CTkFrame\n\nctk.CTkFrame class servicing the Simulation settings menu.\n\nMethods:\n\n\n\n\n\n__init__(parent, controller)\n\nFrame initialisation and features placement.\n\n\n\nTurb_mod_change(select)\n\nChanges turbulence method.\n\n\n\nWall_funct_change(select)\n\nChanges wall function.\n\n\n\nCoupling_change(select)\n\nChanges velocity-coupling method.\n\n\n\nTransient_change(select)\n\nChanges temporal setting."},{"objectID":"Home","href":"API_reference/PyFluent_scripts_API/PyFluent_Meshing_API.html#meshing","title":"Meshing","text":"Meshing\n\nPyFluent script that manages the meshing phase of automation.\n\n\n\n\n\nFunctions:\n\n\n\n\n\nMesher.get_selection_id(Self, Obj_list, meshing)\n\n\n\n\n\nMesher.StartFluentMeshing(MSH_Obj_List, General_Settings, Tunnel_Settings, Boundary_settings, Parameters_settings)\n\n"},{"objectID":"Home","href":"API_reference/GUI_SubClasses_API/GUI_Prisms_API.html#prisms","title":"Prisms","text":"Prisms\n\nModule servicing the prisms sizing options menu.\n\n\n\nclass GUI_Prisms.Prisms(parent, controller)\n\nBases: CTkFrame\n\nctk.CTkFrame class servicing the Prisms settings menu.\n\nMethods:\n\n\n\n\n\n__init__(parent, controller)\n\nConstruct a frame widget with the parent MASTER.\n\nValid resource names: background, bd, bg, borderwidth, class,\ncolormap, container, cursor, height, highlightbackground,\nhighlightcolor, highlightthickness, relief, takefocus, visual, width.\n\n\n\nLoadTree()\n\n\n\n\n\nOnClickTree(event)\n\nSwitches the prism sizing settings based on object that is clicked in the scoped sizing tree.\n\n\n\nwriteScopeSizeFile()\n\nOpens an explorer window and creates a .JSON file.\n\n\n\nupdatePrisms()\n\nUpdates the curently shown prism settings."},{"objectID":"Home","href":"API_reference/Support_modules_API/Support_Mesh_Objects_API.html#mesh-objects","title":"Mesh Objects","text":"Mesh Objects\n\nModule containing classes and methods for mesh sizing creation, reading, writing and general manipulation.\n\n\n\n\n\nClasses:\n\n\n\nFunctions:\n\n\n\n\n\nclass MeshObjects.MSH_Object(name, SF_class)\n\nBases: object\n\nMain class for scope sizing objects.\nAll objects used for meshing are MSH_Object\nMSH_Object contains functions for finding parents of objects\nand parts belonging to given object\n\nAttributes:\n\n\n\nMethods:\n\n\n\n\n\n_registry = []\n\n\n\n\n\n__init__(name, SF_class)\n\n\n\n\n\nMSH_ID = 0\n\n\n\n\n\n_findID()\n\nFunction iterates through all active Meshing Objects and finds smallest avaiable ID\n\nReturns\n\nint\n\n\n\n_findParents(Obj_list)\n\nMethod for finding object parents based on their immediate parent\n!!!WARNING!!! - this method is obsolete as it was used for manually set Scope \nSizing file. This method can cope badly with same named Size Field objects as \nis correct parrent\n\n\n\n_findParentsNew()\n\nNewer method for finding parents where whole parent tree is already\nprovided from Scope Sizing file as it is assumed that the file is automatically\ngenerated from user GUI and therefore can store more information without \nbeing too anoying for user to manipulate with\n\nThis function simply reads string af all object parents and creates\na list of parents from that string.\n\nReturns\n\nlist[string]\n\n\n\n_findParts(Obj_list, Part_list)\n\nMethod for finding all parts containing the name\n\nReturns\n\nlist[MSH_Object]\n\n\n\nclass MeshObjects.BOI(name, SF_class)\n\nBases: MSH_Object\n\nMesh object subclass describing Body Of Influence objects. This class contains information abou scoped sizing for BOIs\n\nAttributes:\n\n\n\nMethods:\n\n\n\n\n\n_BOIregistry = []\n\n\n\n\n\n__init__(name, SF_class)\n\n\n\n\n\n_ValueRead(LineList, LinePointer)\n\nIterates through all object attributes (except methods)\nand assigns values from the object text file to the empty\nvalues. Function takes as input whole list of object \nproperties (LineList) and pointer (int) to the line placement \nof beggining of current object\n\n\n\n_ValueReadJson(Boi_dir)\n\nReads values from a .json file\n\n\n\nclass MeshObjects.Vehicle(name, SF_class)\n\nBases: MSH_Object\n\nClass defining vehicle objects. Those are objects that are directly \nparts of the vehicle (chassis, aero, suspension etc.).\nA such this class stores their atributes containing info \nabout these parts size fields and prisms as well as methods for their \ninitialisation.\n\nAttributes:\n\n\n\nMethods:\n\n\n\n\n\n_VEHregistry = []\n\n\n\n\n\n__init__(name, SF_class)\n\n\n\n\n\n_ValueRead(LineList, LinePointer)\n\nIterates through all object attributes (except methods)\nand assigns values from the object text file to the empty\nvalues. Function takes as input whole list of object \nproperties (LineList) and pointer (int) to the line placement \nof beggining of current object\n\n\n\n_ValueReadJson(Vehicle_dir)\n\nReads values from a .json file\n\n\n\nMeshObjects.ReadObjectList(SF_File_Path)\n\nFunction responsible for reading a .txt file with size field data\nand writing these data into a responsible mesh objects\nReturns a list of all mesh objects\n\n\n\nMeshObjects.ReadJsonObjList(SF_File_Path)\n\nRead data from .json list and initialise them as Mesh Objects\n\nReturns\n\ndict[list[MSH_Objects]]\n\n\n\nMeshObjects.MakeBoundaryLayerDict(Obj_list, Part_list, Zone_list)\n\nObsolete\n\n\n\nMeshObjects.MakeBoundaryLayerDict2(Obj_list, Part_list, Zone_list)\n\nAssigns correct prism settings to individual parts so no prism settings share the same part (due to the mesh setting inheritance)\n\nReturns\n\ndict\n\n\n\nMeshObjects.MakePrismWildcard(Self, Obj_list)\n\n\n\n\n\nMeshObjects.WriteObjToFile(Obj_list, FilePath)\n\nOnly for legacy scope files. Surpassed by WriteScopeToJson() function\n\n\n\nMeshObjects.WriteScopeToJson(Obj_list, file_path)\n\nWrites given mesh object settings list into a provided .json file"},{"objectID":"Home","href":"GUI_guide/simulation.html#simulation-options-menu","title":"Simulation Options Menu","text":"Simulation Options Menu\n\nSimulation options menu sets up simulation models, basic solver settings and iterations setup."},{"objectID":"Home","href":"GUI_guide/simulation.html#turbulence-model","title":"Simulation Options Menu > Turbulence model","text":"Turbulence model\n\ntype: switch - string\n\nType of turbulence model used. Aviable SST k-Omega and k-Epsilon."},{"objectID":"Home","href":"GUI_guide/simulation.html#wall-function","title":"Simulation Options Menu > Wall function","text":"Wall function\n\ntype: switch - string\n\nType of wall function used when k-Epsilon is chosen. Aviable Enhanced, Standard and Non equilibrium"},{"objectID":"Home","href":"GUI_guide/simulation.html#pressure-velocity-coupling","title":"Simulation Options Menu > Pressure-Velocity coupling","text":"Pressure-Velocity coupling\n\ntype: switch - string\n\nType of Pressure-Velocity coupling algorithm. Aviable Coupled and SIMPLE. Coupled algorithm takes up more RAM (roughly\ntwice as much as SIMPLE), takes more time per single iteration but tends to be more stable and converges quicker.\nSIMPLE algorithm is recomended mainly when RAM issues are present."},{"objectID":"Home","href":"GUI_guide/simulation.html#time","title":"Simulation Options Menu > Time","text":"Time\n\ntype: switch - string\n\nChoice between sationary or transient simulation. Aviable Steady and Transient. These settings also change the function of\nsubsequent options."},{"objectID":"Home","href":"GUI_guide/simulation.html#number-of-iterations","title":"Simulation Options Menu > Number of iterations","text":"Number of iterations\n\ntype: text win. - integer\n\nNumber of iterations done for steady simulation."},{"objectID":"Home","href":"GUI_guide/simulation.html#pseudo-time-step","title":"Simulation Options Menu > Pseudo time step","text":"Pseudo time step\n\ntype: text win. - float\n\nA pseudo time step value used for Pseudo Time Method Under-Relaxation method. Higher values could speed up simulation but also make\nless stable. Default value is 1. For more info see  Pseudo Time Method Under-Relaxation"},{"objectID":"Home","href":"GUI_guide/simulation.html#iterations-per-time-step","title":"Simulation Options Menu > Iterations per time step","text":"Iterations per time step\n\ntype: text win. - integer\n\nNumber of iterations performed per single time step during transient simulation."},{"objectID":"Home","href":"GUI_guide/simulation.html#time-step-size-s","title":"Simulation Options Menu > Time step size [s]","text":"Time step size [s]\n\ntype: text win. - float\n\nSize of a single time step during a transient simulation."},{"objectID":"Home","href":"GUI_guide/simulation.html#end-time-of-simulation-s","title":"Simulation Options Menu > End time of simulation [s]","text":"End time of simulation [s]\n\ntype: text win. - integer\n\nFinal time for transient simulation."},{"objectID":"Home","href":"GUI_guide/simulation.html#air-temperature-c","title":"Simulation Options Menu > Air temperature [°C]","text":"Air temperature [°C]\n\ntype: text win. - float\n\nAtmosferic temperature used for air density and viscosity calculations according to International Standard Atmosfere (ISA)."},{"objectID":"Home","href":"GUI_guide/simulation.html#altitude-m","title":"Simulation Options Menu > Altitude [m]","text":"Altitude [m]\n\ntype: text win. - integer\n\nAltitude used for air density and viscosity calculations according to International Standard Atmosfere (ISA)."},{"objectID":"Home","href":"API_reference/Main.html#main","title":"Main","text":"Main\n\nScript responsible for turning on the app and containing classes responsible for running simulations, managing queue, and functional GUI.\n\nMain script can be found at the root folder of entire AutoFluent.\n\n\n\nclass Main.SimulationClass(simGeneralObject, simMeshObjectList, simTunnelObject, simSolverSett, simBoundarySett, simPostproSett, simParametersSett, simName, simStat='wait')\n\nBases: object\n\nClass containing all of simulation settings and responsible for starting individual simulation \nsteps as individual threads.\n\nAttributes:\n\n\n\nMethods:\n\n\n\n\n\nstates = {'dn': 'Done!', 'err': 'Error!!!', 'msh': 'Meshing', 'msh_dn': 'Meshing done!', 'post': 'Postprocessing', 'slv': 'Solving', 'slv_dn': 'Solved', 'wait': 'Waiting'}\n\nShotcuts fow various possible simulation states.\n\n\n\n__init__(simGeneralObject, simMeshObjectList, simTunnelObject, simSolverSett, simBoundarySett, simPostproSett, simParametersSett, simName, simStat='wait')\n\nConstructs a simulation class with simulation settings as its atributes.\n\n\n\nfindSimID()\n\nThis function will automatically find a closest aviable ID number for simulation.\n\nReturns\n\n(Int) ID number of simulation\n\n\n\nstartMeshing()\n\nChanges the simulation status to ‘Meshing’ and pushes the simulation settings to \nMesher.StartFluentMeshing function which takes care of entire meshing workflow.\n\nAfter meshing changes the simulation status to ‘Meshing Done’.\n\nReturns\n\n(String) path to saved volumetric mesh\n\n\n\nstartMeshingThread()\n\nStarts SimulationClass.startMeshing() method in new thread.\n\nReturns\n\n(Thread)\n\n\n\nstartSolver()\n\nChanges the simulation status to ‘Solving’ and pushes the simulation settings to \nSolver.StartFluentSolver function which takes care of entire solver workflow.\n\nAfter solving changes the simulation status to ‘Solver Done’.\n\nReturns\n\n(String) path to saved case file\n\n\n\nstartSolverThread()\n\nStarts SimulationClass.startSolver() method in new thread.\n\nReturns\n\n(Thread)\n\n\n\nstartPostpro()\n\nChanges the simulation status to ‘Postprocessing’ and pushes the simulation settings to \nPostproces.StartPostprocessing() function which takes care of entire postprocessing workflow.\n\nAfter postprocessing changes the simulation status to ‘Done’.\n\nReturns\n\nTrue\n\n\n\nstartPostproThread()\n\nStarts SimulationClass.startPostpro() method in new thread.\n\nReturns\n\n(Thread)\n\n\n\nclass Main.MainMenuButtons(master)\n\nBases: CTkScrollableFrame\n\nclass that initialises the main menu buttons which redirect the user to given \nsubcategories.\n\nMethods:\n\n\n\n\n\n__init__(master)\n\nConstruct a frame widget with the parent MASTER.\n\nValid resource names: background, bd, bg, borderwidth, class,\ncolormap, container, cursor, height, highlightbackground,\nhighlightcolor, highlightthickness, relief, takefocus, visual, width.\n\n\n\nclass Main.Queue(master, **kwargs)\n\nBases: CTkFrame\n\nQueue class manages the order of simulations in queue as well as a visualisation of queue in GUI.\n\nMethods:\n\n\n\n\n\n__init__(master, **kwargs)\n\nConstruct a frame widget with the parent MASTER.\n\nValid resource names: background, bd, bg, borderwidth, class,\ncolormap, container, cursor, height, highlightbackground,\nhighlightcolor, highlightthickness, relief, takefocus, visual, width.\n\n\n\nupdateSims(simList)\n\nThis method checks all simulations in queue and and assigns a propper status and colour based \non simulation status.\n\n\n\ninsertSim(sim)\n\nInserts a new simulation (SimulationClass) to queue.\n\n\n\nupdateColour(simList)\n\nAssigns a proper colour in queue based on simulation status.\n\n\n\nclass Main.PrintLogger(textbox)\n\nBases: object\n\nFile like objects for redirected terminal view.\n\nMethods:\n\n\n\n\n\n__init__(textbox)\n\n\n\n\n\nwrite(text)\n\nWrites into a Logger.\n\n\n\nflush()\n\n\n\n\n\nclass Main.MainApp(fg_color=None, *args, **kwargs)\n\nBases: CTk\n\nA main CTKinter class that services all other TKinter classes and pushes simulation settings into queue.\n\nMethods:\n\n\n\n\n\n__init__(fg_color=None, *args, **kwargs)\n\nReturn a new top level widget on screen SCREENNAME. A new Tcl interpreter will\nbe created. BASENAME will be used for the identification of the profile file (see\nreadprofile).\nIt is constructed from sys.argv[0] without extensions if None is given. CLASSNAME\nis the name of the widget class.\n\n\n\nwindows_init()\n\nInitialises the Options Menus top scrolls buttons and inserts a ctk.CTkFrame class of options menu to each button.\n\nIf new options menu is desired, its ctk.CTkFrame class needs to be inserted into container bellow.\n\n\n\nreset_logging()\n\nResets the terminal redirecting back to python terminal.\n\n\n\nredirect_logging()\n\nRedirects the python terminal into a GUI terminal (read only).\n\n\n\nbrowseFolders()\n\nOpens the explorer window and puts the selected folder into a GeneralObject.workingDirectory attribute.\n\n\n\nchangeSegment(a)\n\nChanges the simulation starting point and activates the GUI_Subclasses/GUI_General.General.activateDataInput() method.\n\n\n\nStart()\n\nCreates the SimulationsClass from current settings and pushes the simulation into a simulation queue.\n\n\n\nQueueLoop()\n\nLoop responsible for pushing simulations in the queue.\n\n\n\nshow_frame(cont)\n\nShows a frame of given ctk.CTkFrame class options menu.\n\n\n\ngetJsonSavePath()\n\nGets a .json file path from opened explorer window and writes current simulation settings \ninto newly created .json file.\n\n\n\nWriteSettToJson(Obj_list, file_path)\n\nWrites all the provided Settings objects into a provided .json file.\n\n\n\nbrowseJsonFiles()\n\nOpens the explorer window and reads the selected .json settings file.\n\n\n\nReadSettJson(File_path)\n\nReads a provided .json file and loads the values into settings objects."},{"objectID":"Home","href":"GUI_guide/GUI_guide.html#graphical-user-interface-guide","title":"Graphical User Interface Guide","text":"Graphical User Interface Guide\n\n\n\nSome stupid words for now"},{"objectID":"Home","href":"GUI_guide/postprocessing.html#posprocessing-options-menu","title":"Posprocessing Options Menu","text":"Posprocessing Options Menu\n\nPosprocessing options menu gives users options to choose which and how detailed postprocessing features they want to perform for their simulation."},{"objectID":"Home","href":"GUI_guide/postprocessing.html#export-forces-to-excell-file","title":"Posprocessing Options Menu > Export forces to excell file?","text":"Export forces to excell file?\n\ntype: check - bool\n\nOption to export drag, lift, and pressure distribution of all subassemblies into a .CSV file."},{"objectID":"Home","href":"GUI_guide/postprocessing.html#iteration-averaging","title":"Posprocessing Options Menu > Iteration averaging","text":"Iteration averaging\n\ntype: text win. - integer\n\nNumber of latest iterations over which to average drag, lift, distributions data and RMS field values."},{"objectID":"Home","href":"GUI_guide/postprocessing.html#create-report-file","title":"Posprocessing Options Menu > Create report file?","text":"Create report file?\n\ntype: check - bool\n\nOption to create .pdf report file which include information about convergence, mesh quality and some results."},{"objectID":"Home","href":"GUI_guide/postprocessing.html#create-avz-files","title":"Posprocessing Options Menu > Create AVZ files?","text":"Create AVZ files?\n\ntype: check - bool\n\nOption to create .AVZ which contains 3D countured scenes which can be opend in Ansys Viewer. Fluent will create scenes of:\nwall y+, x wall shear stress, static pressure, pressure coeficient and q-criterion isosurface."},{"objectID":"Home","href":"GUI_guide/postprocessing.html#starting-coordinate-m-xy-xz-yz","title":"Posprocessing Options Menu > Starting coordinate [m]: (XY, XZ, YZ)","text":"Starting coordinate [m]: (XY, XZ, YZ)\n\ntype: 3x text win. - float\n\nStarting coordinate from which postprocessing will start creating cutplanes."},{"objectID":"Home","href":"GUI_guide/postprocessing.html#end-coordinate-m-xy-xz-yz","title":"Posprocessing Options Menu > End coordinate [m]: (XY, XZ, YZ)","text":"End coordinate [m]: (XY, XZ, YZ)\n\ntype: 3x text win. - float\n\nEnd coordinate to which postprocessing will finish creating cutplanes."},{"objectID":"Home","href":"GUI_guide/postprocessing.html#number-of-cuts-xy-xz-yz","title":"Posprocessing Options Menu > Number of cuts: (XY, XZ, YZ)","text":"Number of cuts: (XY, XZ, YZ)\n\ntype: 3x text win. - integer\n\nNumber of contour cuts that will be created for each major plane."},{"objectID":"Home","href":"GUI_guide/postprocessing.html#velocity-magnitude-cuts","title":"Posprocessing Options Menu > Velocity magnitude cuts:","text":"Velocity magnitude cuts:\n\ntype: check - bool\n\nWhether to create cuts of velocity magnitude contours."},{"objectID":"Home","href":"GUI_guide/postprocessing.html#velocity-lic-cuts","title":"Posprocessing Options Menu > Velocity LIC cuts:","text":"Velocity LIC cuts:\n\ntype: check - bool\n\nWhether to create cuts of velocity Line Integral Convolutions."},{"objectID":"Home","href":"GUI_guide/postprocessing.html#mean-static-pressure-cuts","title":"Posprocessing Options Menu > Mean Static Pressure cuts:","text":"Mean Static Pressure cuts:\n\ntype: check - bool\n\nWhether to create cuts of Mean Static Pressure contours."},{"objectID":"Home","href":"GUI_guide/postprocessing.html#total-pressure-cuts","title":"Posprocessing Options Menu > Total Pressure cuts:","text":"Total Pressure cuts:\n\ntype: check - bool\n\nWhether to create cuts of Total Pressure contours.#"},{"objectID":"Home","href":"GUI_guide/postprocessing.html#vorticity-cuts","title":"Posprocessing Options Menu > Vorticity cuts:","text":"Vorticity cuts:\n\ntype: check - bool\n\nWhether to create cuts of Vorticity contours."},{"objectID":"Home","href":"API_reference/GUI_SubClasses_API/GUI_General_API.html#general","title":"General","text":"General\n\nModule servicing the general options menu as well as parent to all settings classes.\n\n\n\nclass GUI_General.Setting\n\nBases: object\n\nA parent class for every settings object. Makes settings import and copy creations easier.\n\nMethods:\n\n\n\n\n\nTransferFromTKinter()\n\nCreates a copy of the object.\n\nReturns\n\ntype(self)\n\n\n\n_ValueReadJson(Settings_dir)\n\nReads a values from .json file.\n\n\n\n\n\nclass GUI_General.GeneralSett\n\nBases: Setting\n\nClass containing general settings of meshing and simulation\n(precision of solver, number of processes, GPU or CPU solver, etc.).\n\nMethods:\n\n\n\n\n\n__init__()\n\nAssigns default values.\n\n\n\nclass GUI_General.General(parent, controller)\n\nBases: CTkFrame\n\nctk.CTkFrame class servicing the General settings menu.\n\nMethods:\n\n\n\n\n\n__init__(parent, controller)\n\nFrame initialisation and features placement.\n\n\n\nbrowseFiles()\n\nOpen an explorer window and put a selected path to a CAD file into a GeneralSett.CAD_Path attribute.\n\n\n\nbrowseFilesData()\n\nOpen an explorer window and put a selected path to a .DAT fluent data file into a GeneralSett.Data_Path attribute.\n\n\n\nbrowseFilesMesh()\n\nOpen an explorer window and put a selected path to a .msh fluent mesh file into a GeneralSett.DefaultMeshPath attribute.\n\n\n\nPyConsoleChange()\n\nSwitches between Python and tui console in Fluent GUI.\n\n\n\nWebServerChange()\n\nStart a remote web server.\n\n\n\nGUIChange()\n\nStart with Fluent GUI.\n\n\n\nDoublePrecisionChange(select)\n\nChanges the preccision solver setting.\n\n\n\nVersionChange(select)\n\nSlection of Fluent version.\n\n\n\nGPUChange(select)\n\nSelect CPU or GPU solver.\n\n\n\nactivateDataInput()\n\nSets the initial simulation stage based on Segment Button. Also alters button and text windows states based on selected stage.\n\n\n\nFullAssemblyChange()\n\nWether only part of the assembly or whole assembly is loaded."},{"objectID":"Home","href":"Literature/Literature.html#literature","title":"Literature","text":"Literature"},{"objectID":"Home","href":"Literature/Literature.html#fluid-dynamics","title":"Literature > Fluid Dynamics","text":"Fluid Dynamics\n\nAn intimate knowledge of fluid dynamics is an essential tool in race car aerodynamicists toolkit. It allows us to predict the fluid flow behavior based on involved geometry\nand to correctly interpret the results provided by computational toold."},{"objectID":"Home","href":"Literature/Literature.html#an-introduction-to-fluid-dynamics","title":"Literature > An Introduction to Fluid Dynamics","text":"An Introduction to Fluid Dynamics\n\n“An Introduction to Fluid Dynamics” by G. K. Batchelor remains a classic fluid mechanics book that addresses the theories of\nthis field in an elegant manner. Though published in 1960’s, this timeless classic still holds a reader’s attention.\n\nAn Introduction to Fluid Dynamics"},{"objectID":"Home","href":"Literature/Literature.html#mechanika-tekutin-cz","title":"Literature > Mechanika Tekutin (CZ)","text":"Mechanika Tekutin (CZ)\n\nTato skripta jsou určena pro předmět „Mechanika tekutin“ přednášený v jednom\nsemestru základního studia v rozsahu tří hodin přednášek a dvou hodin cvičení týdně. Skripta\njsou úvodem do mechaniky tekutin a klademe si za cíl, aby student sám uměl správně\naplikovat základní fyzikální zákony, jako např. zákony zachování hmotnosti, hybnosti\na energie i na pohyb tekutin.\n\nMechanika Tekutin"},{"objectID":"Home","href":"Literature/Literature.html#fluid-mechanics-an-intermediate-approach","title":"Literature > Fluid Mechanics: An Intermediate Approach","text":"Fluid Mechanics: An Intermediate Approach\n\nIf you’re looking to delve deeper into more advanced material, “Fluid Mechanics: An Intermediate Approach” by Bijay K.\nSultanian takes a practical rather than purely theoretical approach.\nA variety of illustrative examples provide context to the subject matter and help navigate the reader through a broad range of topics."},{"objectID":"Home","href":"Literature/Literature.html#cfd-theory","title":"Literature > CFD theory","text":"CFD theory\n\nLiterature for robust knowledge of theory behind CFD solvers. While not necesary for handling of commercial software, it provides useful knowledge of its limitations and\nposibilities. After sufitiently learning the texts bellow, you should be able to create zour own simple 2D CFD solver."},{"objectID":"Home","href":"Literature/Literature.html#introduction-to-computational-fluid-dynamics","title":"Literature > Introduction To Computational Fluid Dynamics","text":"Introduction To Computational Fluid Dynamics\n\nThis book seeks to present all the fundamental material needed for good\nsimulation of fluid flows by means of the finite volume method, and is split\ninto three parts. The first part, consisting of Chapters 2 and 3, is concerned\nwith the fundamentals of fluid flows in three dimensions and turbulence.\nChapter 3 represents the development of the concepts of turbulence that are necessary for a full appreciation of the finer details of CFD in many engineering applications.\nThe second part of the book is devoted to the numerical algorithms of\nthe finite volume method and covers Chapters 4 to 9. Discretisation schemes\nand solution procedures for steady flows are discussed in Chapters 4 to 7.\n\nIntroduction To Computational Fluid Dynamics"},{"objectID":"Home","href":"Literature/Literature.html#metoda-konečných-objemů-i-ii-cz","title":"Literature > Metoda Konečných Objemů I, II (CZ)","text":"Metoda Konečných Objemů I, II (CZ)\n\nSkripta pro předmět Metoda Konečných Objemů vyučovaný panem Profesorem Fürstem. První skripta pojednávají o odvození MKO, definici a odvození jednotlivých diskretizačních\nschémat a určení jejich přesnosti a stability. Ke konci této knihy by student měl být schopný vytvořit vlastní 1D až 2D EXPLICITNÍ CFD řešič a znát\nrozdíly, výhody a limitace jednotlivých schémat.\n\nDruhá skripta pojednávají o algoritmech pro tvorbu sítě, diskretizaci konvektivních, difusivních a diferenciálních operátorů v diferenciálních rovnicích a jejich\nmaticové vyjídření. Ve výsledku by tyto skripta měla předat znalosti potřebné k tvorbě a pochopení IMPLICITNÍHO CFD řešiče.\n\nMetoda Konečných Objemů I\n\nMetoda Konečných Objemů II"},{"objectID":"Home","href":"Literature/Literature.html#notes-on-computational-fluid-dynamics-general-principles","title":"Literature > Notes on Computational Fluid Dynamics: General Principles","text":"Notes on Computational Fluid Dynamics: General Principles\n\nNotes on Computational Fluid Dynamics (CFD) was written for people who use CFD in their work, research or study,\nproviding essential knowledge to perform CFD analysis with confidence. It offers a modern perspective on CFD with the finite volume method,\nas implemented in OpenFOAM and other popular general-purpose CFD software. Fluid dynamics, turbulence modelling and boundary conditions are presented\nalongside the numerical methods and algorithms in a series of short, digestible topics, or notes, that contain complete, concise and relevant information.\n\nNotes on Computational Fluid Dynamics"},{"objectID":"Home","href":"Literature/Literature.html#internal-flows","title":"Literature > Internal Flows","text":"Internal Flows\n\nWether it is for cooling ducts and fans or inner structures of motor cooling, internal flows are quiet different from structures of external flow.\nBellow is some literature that should aid in designing such features."},{"objectID":"Home","href":"Literature/Literature.html#handbook-of-hydraulic-resistance","title":"Literature > Handbook of Hydraulic Resistance","text":"Handbook of Hydraulic Resistance\n\nNo matter how weird shape of your tubing, chances are that someone has already meassured its effect on your flow. In this case it was the russians during the cold war.\nNevertheless this knowledge is still relevant for designing of inner flow structures and understanding how they affect the resistance of the flow.\n\nHandbook of Hydraulic Resistance"},{"objectID":"Home","href":"Literature/Literature.html#vdi-heat-atlas","title":"Literature > VDI Heat Atlas","text":"VDI Heat Atlas\n\nThe VDI-Wa ¨rmeatlas or VDI Heat Atlas has a long-lasting history and it can be considered as a standard book for heat exchanger\nand process engineering equipment design. It is not conceived as a textbook presenting an overall view of the theoretical or\nexperimental findings in heat transfer sciences. The aim was and is to present and explain the state of the art of engineering methods\nto solve industrially relevant heat transfer problems for apparatus design and process modeling.\n\nVDI Heat Atlas"},{"objectID":"Home","href":"Literature/Literature.html#fan-handbook","title":"Literature > Fan Handbook","text":"Fan Handbook\n\nA guide to various aspects of modern fan technology. It takes you through the design, selection, maintenance, and repair of fans used\nin a range of applications and industries, including airfoils; centrifugal fans; mixed-flow fans; roof ventilators; cross-flow blowers; regenerative blowers; and, more.\n\nFan Handbook"},{"objectID":"Home","href":"Literature/Literature.html#car-aerodynamics","title":"Literature > Car Aerodynamics","text":"Car Aerodynamics\n\nCar aerodynamics is in itself a large and still developing area. Hundreds of engineers before have already tried many concepts to reduce drag and increase downforce.\nFew of them took their years of practise and wrote them into some helpfull literature."},{"objectID":"Home","href":"Literature/Literature.html#race-car-aerodynamics","title":"Literature > Race Car Aerodynamics","text":"Race Car Aerodynamics\n\nRace Car Aerodynamics is the first book to summarize the secrets of the rapidly developing field of high-speed vehicle design.\nOver the past 15 years, author Joseph Katz has been involved with aerodynamic development in the most competitive areas of motorsport today.\nFrom Formula One, to Indy Car, Drag and Sedan Racing, this book provides clear explanations for both engineers who want to improve their design skills,\nand enthusiasts who want to understand how their favorite cars go fast.\n\nRace Car Aerodynamics"},{"objectID":"Home","href":"user_guide/geometry_naming.html#cad-model-preparation","title":"CAD model preparation","text":"CAD model preparation\n\nIt is crutial to maintain a good naming system of your CAD geometry and to adhere to certain rules when naming your parts and assemblies.\nThe pyfluent script takes yopur imported CAD and renames each part and assembly so that it contains also name of its entire CAD tree hierarchy.\nThis enables us to find the correct parts even if part with same name exists in different assembly and allow us to assign mesh sizings to entire\nassemblies without needing to specify them for each part."},{"objectID":"Home","href":"user_guide/geometry_naming.html#the-tree-structure","title":"CAD model preparation > The tree structure","text":"The tree structure\n\nThe base of the cad tree should be divided into two assemblies. The Vehicle assembly, that contains the car geometry and the BOIs assembly,\nwhich contains then bodies of influence. It is important to have them in separate assemblies as both are treated very differently.\n\nAbove is an example of a functional CAD tree with a Vehicle and BOIs assemblies on top of CAD tree hierarchy."},{"objectID":"Home","href":"user_guide/geometry_naming.html#part-naming","title":"CAD model preparation > Part naming","text":"Part naming\n\nIn terms of naming of parts, do not use signs such as (*,-.: ) since these would interfere with either AutoFluent part search engine or\nFluents internal part naming. If you want to seperate your part name use either underscore ( _ ) or start each new word with uppercase letter.\n\nBy default after CAD import fuent names the imported part in format:\n\npart_name:tree_path-part_name-solid_name.\n\nIf we take a single solid in the front wing example bellow:\n\nWe can see that the part name is wing, the solid name is Solid and tree path is vehicle-a-fs-fwing. The resulting part will then be named:\n\nWhich makes later working with Fluent parts much easier."},{"objectID":"Home","href":"user_guide/geometry_naming.html#inheritance","title":"CAD model preparation > Inheritance","text":"Inheritance\n\nDuring a CAD creation a concept of inheritance should be kept in mind. Here the concept of inheritance applies mainly on surface\nmesh sizing, meaning that a part inherits all of the surface mesh sizing options from all of its parents in CAD tree. The final\nresulting mesh sizing is then derived from the smallest mesh size setting applied.\n\nAs example if we apply medium surface mesh sizing for the aerodynamics assembly named “a” and this medium setting will be applied\nto all its subassemblies (in this case “sw”, “rw”, “fw”) and their individual subassemblies and parts. I could then decide to apply\na finer sizing to a front wing endpalte part called “endplate”. This part also inherits the medium setting from the “a” assembly\nwhich is its parent, but since the smallest settings applies, fluent will ignore the medium setting.\n\nApart from scope sizing the concept of inheritance also applies to prism creation and created report definitions of lift and drag.\n\nIt then makes sense to structure the CAD tree from the largest details to the finest."},{"objectID":"Home","href":"user_guide/geometry_naming.html#specific-part-names","title":"CAD model preparation > Specific Part Names","text":"Specific Part Names\n\nSome parts need to contain specific string in their name in order to be recognised by the script and to be assigned special boundary conditions or properties.\n\n\n\n\n\n\n\nPart\n\nCAD part\nname\n\nDescription\n\nFront wheel\n\nwheel_front\n\nAplies rotating moving wall condition\n\nRear wheel\n\nwheel_front\n\nAplies rotating moving wall condition\n\nBody Of Influence\n\nBOI\n\nFunctions as body of influence scope sizing volume\n\nRadiator\n\nradiator\n\nVolume on which a porus zone is applied for fan and radiator simulation (optional)\n\nFan\n\nrotor\n\nAplies 2D Fan condition to radiator interface (optional)"},{"objectID":"Home","href":"API_reference/PyFluent_scripts_API/PyFluent_Postprocessing_API.html#postprocessing","title":"Postprocessing","text":"Postprocessing\n\nPyFluent script that manages the postprocessing phase of automation.\n\n\n\n\n\nFunctions:\n\n\n\n\n\nPostproces.create_contour(root, name, field, surfaces_list, range)\n\nFunction for quick creating of contour objects.\nInputs:\nroot - Fluent instance\nname - Name of the contour [string]\nfield - \nsurfaces_list - List of surfaces on which the contour shlould be shown on [list[string]]\nrange - Min and Max values of the contour [list[float]]\nReturns:\nObject of created contour\n\n\n\nPostproces.create_lic(root, name, field, vector_field, plane, range)\n\nFunction for quick line integral convolutoion creation.\nInput:\nrooot - Fluent Instance\nname - LICs name [string]\nfield - field to be visualised [string]\nvector_field - field used for vector directions [string]\nplane - plane on which to show the LIC [string]\nrange - Min and Max values range [list[float]]\nReturns:\nObject of created LICs\n\n\n\nPostproces.create_plane(root, name, plane, value)\n\ncreates a plane in either YZ, ZX or XY plane\nplane parameter dictate in which plane the surface will be created\n‘plane’ allowed values  - ‘YZ’, ‘ZX’, ‘XY’\nreturns the created surface object\n\n\n\nPostproces.create_iso_surface(root, name, field, value)\n\ncreates Iso-surface based on field and its value\nInput:\nroot - Fluent instance\nname - created iso-surface name [string]\nfield - field from which to create the iso-surface [string]\nvalue - field value for iso-surface [float]\nReturns:\nObject of created iso-surface\n\n\n\nPostproces.create_histogram(root, name, field)\n\n\n\n\n\nPostproces.change_camera(root, view)\n\nChanges camera positions based on predefined camera views\nInput:\nroot - Fluent instance\nview - Dictionary with predefined camera views [dict[list[float]]]\n\n\n\nPostproces.save_avz(root, filename, workDir)\n\n\n\n\n\nPostproces.create_mesh(root, name, zones, colour)\n\nCreates visualisation of a mesh\nInput:\nroot - Fluent instance\nname - Name of created mesh [string]\nzones - Areas which to visualise [list[string]]\ncolour - colour of created surface [string]\n\n\n\nPostproces.StartPostprocessing(solverPath, GeneralSett, SolvSett, PostproSett, MSH_Objects)\n\nMain function for postporcessing of fluent case"},{"objectID":"Home","href":"user_guide/mesh_settings.html#creatings-mesh","title":"Creatings mesh","text":"Creatings mesh\n\nIn Fluent creating a mesh consists of manz subtasks ranging from part import management, tunnel creation, edge extractions, surface mesh settings, volume mesh settings,\nmesh improvements, volume definisions, boundary definitions, scope sizings and prism sizings. Thankfully we need to concern ourselves only with the latter two, as most of the\nother tasks are managed by the script."},{"objectID":"Home","href":"user_guide/mesh_settings.html#scoped-sizing","title":"Creatings mesh > Scoped Sizing","text":"Scoped Sizing\n\nSize Functions and Scoped Sizing provide control over how the mesh size is distributed on a surface or within the volume.\nThey provide accurate sizing information for the mesh distribution and precise refinement control.\n\nScoped sizing differs from size functions in how the sizing can be associated with objects or zones, respectively.\nScoped sizing may be applied to model features such as faces, edges, face zone labels or unreferenced face or edge zones"},{"objectID":"Home","href":"user_guide/mesh_settings.html#assigning-scoped-sizing","title":"Creatings mesh > Assigning Scoped Sizing","text":"Assigning Scoped Sizing\n\nFor specifying mesh size the Scoped Sizing menu is aviable. This menu consists of the tree window ` on the left side,  scoped sizing :green:`file loading on top of the menu,\nindividual sizings individual sizings controlls in the middle and tree manipulation buttons on the bottom."},{"objectID":"Home","href":"GUI_guide/scopesizing.html#scoped-sizing-options-menu","title":"Scoped Sizing Options Menu","text":"Scoped Sizing Options Menu\n\nScoped Sizing options menu specifies mesh dimensions on specified parts and assemblies and also in Bodies Of Influence (BOI)."},{"objectID":"Home","href":"GUI_guide/scopesizing.html#open","title":"Scoped Sizing Options Menu > Open…","text":"Open…\n\ntype: text win. - string\n\nPath to a .json file containing scoped sizings to be loaded. Opens an explorer window"},{"objectID":"Home","href":"GUI_guide/scopesizing.html#name","title":"Scoped Sizing Options Menu > Name","text":"Name\n\ntype: text win. - string\n\nName of mesh sizing. Should match name of coinciding part or assembly in CAD tree."},{"objectID":"Home","href":"GUI_guide/scopesizing.html#obj-id","title":"Scoped Sizing Options Menu > Obj ID","text":"Obj ID\n\ntype: text win. - integer\n\nID of created mesh sizing. Creates automatically, no need to overwrite."},{"objectID":"Home","href":"GUI_guide/scopesizing.html#max-size","title":"Scoped Sizing Options Menu > Max. size","text":"Max. size\n\ntype: text win. - float\n\nMaximum allowed mesh size (in mm) at given location."},{"objectID":"Home","href":"GUI_guide/scopesizing.html#min-size","title":"Scoped Sizing Options Menu > Min. size","text":"Min. size\n\ntype: text win. - float\n\nMinimum allowed mesh size (in mm) at given location. If another sizing with smaller Min. size value exist on same part, smaller value is used."},{"objectID":"Home","href":"GUI_guide/scopesizing.html#growth-rate","title":"Scoped Sizing Options Menu > Growth rate","text":"Growth rate\n\ntype: text win. - float\n\nA maximum rate of geometric growth of neighboring cells."},{"objectID":"Home","href":"GUI_guide/scopesizing.html#size-control-method","title":"Scoped Sizing Options Menu > Size control method","text":"Size control method\n\ntype: switch - string\n\nWhich size controls are to be applied for given assembly. Aviable are Curvature, Proximity and Curvature and Proximity.\nFor more info see Size Functions and Scoped Sizing"},{"objectID":"Home","href":"GUI_guide/scopesizing.html#cells-per-gap","title":"Scoped Sizing Options Menu > Cells per gap","text":"Cells per gap\n\ntype: text win. - float\n\nActive when proximity method is selected. Minimum cell layers used to fill a gap."},{"objectID":"Home","href":"GUI_guide/scopesizing.html#curvature","title":"Scoped Sizing Options Menu > Curvature","text":"Curvature\n\ntype: text win. - float\n\nActive when curvature method is selected. Minimum angle to be preserved in curve."},{"objectID":"Home","href":"GUI_guide/scopesizing.html#proximity-scope-to","title":"Scoped Sizing Options Menu > Proximity scope to…","text":"Proximity scope to…\n\ntype: switch - string\n\nActive when proximity method is selected. Defines to which part geomatry feature the proximity sizing is applied to. Aviable are Edge, Faces\nand Faces and Edges."},{"objectID":"Home","href":"GUI_guide/scopesizing.html#curvature-scope-to","title":"Scoped Sizing Options Menu > Curvature scope to…","text":"Curvature scope to…\n\ntype: switch - string\n\nActive when curvature method is selected. Defines to which part geomatry feature the curvature sizing is applied to. Aviable are Edge, Faces\nand Faces and Edges."},{"objectID":"Home","href":"GUI_guide/scopesizing.html#write","title":"Scoped Sizing Options Menu > Write…","text":"Write…\n\ntype: button - string\n\nOpens an explorer window through which user saves the current prism and scoped sizing settings into a .json file."},{"objectID":"Home","href":"GUI_guide/scopesizing.html#add-child","title":"Scoped Sizing Options Menu > Add Child","text":"Add Child\n\ntype: button - mesh_object\n\nAdds a new mesh sizing under a currently chosen sizing."},{"objectID":"Home","href":"GUI_guide/scopesizing.html#update","title":"Scoped Sizing Options Menu > Update","text":"Update\n\ntype: button - -\n\nSaves changed parameters for current mesh sizing. Needs to be pressed after every change to a sizing."},{"objectID":"Home","href":"API_reference/GUI_SubClasses_API/GUI_Parametrization_API.html#parametrization","title":"Parametrization","text":"Parametrization\n\nModule servicing the parametrization options menu as well as parametrization settings object.\n\n\n\nclass GUI_Parametrization.ParametrizationSett\n\nBases: Setting\n\nClass containing parametrization settings of yaw, roll and ride height.\n\nMethods:\n\n\n\n\n\n__init__()\n\nAssigns default values.\n\n\n\nclass GUI_Parametrization.Parameters(parent, controller)\n\nBases: CTkFrame\n\nctk.CTkFrame class servicing the Parametrization settings menu.\n\nMethods:\n\n\n\n\n\n__init__(parent, controller)\n\nConstruct a frame widget with the parent MASTER.\n\nValid resource names: background, bd, bg, borderwidth, class,\ncolormap, container, cursor, height, highlightbackground,\nhighlightcolor, highlightthickness, relief, takefocus, visual, width.\n\n\n\nPitch_var_change()\n\nEnable or disable pitch parametrization.\n\n\n\nRoll_var_change()\n\nEnable or disable roll parametrization.\n\n\n\nYaw_var_change()\n\nEnable or disable Yaw parametrization."},{"objectID":"Home","href":"user_guide/postprocessing_guide.html#posprocessing","title":"Posprocessing","text":"Posprocessing\n\nPosprocessing options menu gives users options to choose which and how detailed postprocessing features they want to perform for their simulation."},{"objectID":"Home","href":"user_guide/postprocessing_guide.html#export-forces-to-excell-file","title":"Posprocessing > Export forces to excell file?","text":"Export forces to excell file?\n\ntype: check - bool\n\nOption to export drag, lift, and pressure distribution of all subassemblies into a .CSV file."},{"objectID":"Home","href":"user_guide/boundary_conditions.html#boundary-conditions-options-menu","title":"Boundary Conditions Options Menu","text":"Boundary Conditions Options Menu\n\nBoundary conditions options menu specifies inlet velocity, wheel diameter and wheel base, radiators and fan settings."},{"objectID":"Home","href":"user_guide/boundary_conditions.html#inlet-velocity-ms","title":"Boundary Conditions Options Menu > Inlet velocity [m/s]","text":"Inlet velocity [m/s]\n\ntype: text win. - float\n\nInlet air velocity. Same as car speed."},{"objectID":"Home","href":"user_guide/boundary_conditions.html#wheel-diameter-m","title":"Boundary Conditions Options Menu > Wheel diameter [m]","text":"Wheel diameter [m]"},{"objectID":"Home","href":"GUI_guide/bottomstatic.html#bottom-static-menu","title":"Bottom Static Menu","text":"Bottom Static Menu\n\nBottom static menu provides selection of starting simulation stage, writing and reading of overall simulation settings and working directory."},{"objectID":"Home","href":"GUI_guide/bottomstatic.html#meshingsolverpostprocess","title":"Bottom Static Menu > Meshing/Solver/Postprocess","text":"Meshing/Solver/Postprocess\n\ntype: segment - string\n\nOption to start simulation from certain stage. User can choose to start from either meshing, solver or postprocessing stage."},{"objectID":"Home","href":"GUI_guide/bottomstatic.html#working-directory","title":"Bottom Static Menu > Working directory","text":"Working directory\n\ntype: text win. - string\n\nPath to a working directory where all the outputs and results will be saved"},{"objectID":"Home","href":"GUI_guide/bottomstatic.html#load-settings","title":"Bottom Static Menu > Load settings","text":"Load settings\n\ntype: button - string\n\nOpens an explorel window where simulation settings .json file can be chosen."},{"objectID":"Home","href":"GUI_guide/bottomstatic.html#save-settings","title":"Bottom Static Menu > Save settings","text":"Save settings\n\ntype: button - string\n\nWrite .json file containing simulation settings."},{"objectID":"Home","href":"GUI_guide/bottomstatic.html#start-calculation","title":"Bottom Static Menu > Start calculation","text":"Start calculation\n\ntype: button - sim_class\n\nPushes the simulation with current settings into a queue."},{"objectID":"Home","href":"getting_started/getting_started.html#getting-started-with-autofluent","title":"Getting Started with AutoFluent","text":"Getting Started with AutoFluent"},{"objectID":"Home","href":"getting_started/getting_started.html#downloading-autofluent","title":"Getting Started with AutoFluent > Downloading AutoFluent","text":"Downloading AutoFluent\n\nUser can either download entire branch from gitHub web or pull the branch from git."},{"objectID":"Home","href":"getting_started/getting_started.html#dependend-libraries","title":"Getting Started with AutoFluent > Dependend libraries","text":"Dependend libraries\n\nAutoFluent is dependend on these external libraries that need  to be installed prior:\n\ncustomtkinter\n\nPIL\n\nansys.fluent.core\n\nansys.geometry.core\n\npint\n\nopenpyxl\n\nnumpy\n\npandas\n\nwhich you can all instal through:"},{"objectID":"Home","href":"getting_started/getting_started.html#starting-autofluent","title":"Getting Started with AutoFluent > Starting AutoFluent","text":"Starting AutoFluent\n\nTo use AutoFluent a Python 3.8 or higher needs to be installed. Inside a downloaded folder a Main.py script is located.\nIf started throug Python a graphical user interface will appear."},{"objectID":"Home","href":"getting_started/getting_started.html#navigating-graphical-user-interface","title":"Getting Started with AutoFluent > Navigating Graphical User Interface","text":"Navigating Graphical User Interface\n\nGUI is divided into 5 distincted areas. Top select menu (Blue) switches between different options menus.\nMiddle large window (Yellow) is where options menus are shown.\nBottom static menu (Red) is for general settings as working directory, solver stage, settings presets and starting simulation.\nRight side bar (Purple) is a visualisation of a solution queue.\nOn bottom (Green) is a transcript from a console.\n\n"},{"objectID":"Home","href":"API_reference/PyFluent_scripts_API/PyFluent_Solver_API.html#solver","title":"Solver","text":"Solver\n\nPyFluent script that manages the solver phase of automation.\n\n\n\n\n\nFunctions:\n\n\n\n\n\nSolver.load_fan_curve_from_txt(Fan_2D_curve_Path)\n\n\n\n\n\nSolver.FindPart(Name, list)\n\nFunction for finding a part in a list\n\n\n\nSolver.CalculatePressure(height)\n\n\n\n\n\nSolver.CalculateDensity(Press, Temp)\n\n\n\n\n\nSolver.CalculateViscosity(Temp)\n\n\n\n\n\nSolver.StartFluentSolver(BoundarySett, SolvSett, TurnSett, MSH_Objects, SettGen, PostproSett, MeshPath=None)\n\nStart of a function containing whole solver workflow\nInputs:\nBoundarySett - SolverSettings object containing settings for a solver\nMeshing - Fluent Instance returned from Meshing function\nworkingDirectory - A path to a working directory#\nMSH_Object - list of all meshing objects that contains info about scopesizing, object type, prism settings etc.\nReturns:\nA fluent instance"},{"objectID":"Home","href":"API_reference/Support_modules_API/Support_modules_API_content.html#support-modules","title":"Support modules","text":"Support modules\n\nAn API reference for classes and methods for mesh settings and geometry handling and creation.\n\n"},{"objectID":"Home","href":"CFD_guide/Mesh_sensitivity_study.html#cad-model-preparation","title":"CAD model preparation","text":"CAD model preparation\n\nIt is crutial to maintain a good naming system of your CAD geometry and to adhere to certain rules when naming your parts and assemblies.\nThe pyfluent script takes yopur imported CAD and renames each part and assembly so that it contains also name of its entire CAD tree hierarchy.\nThis enables us to find the correct parts even if part with same name exists in different assembly and allow us to assign mesh sizings to entire\nassemblies without needing to specify them for each part."},{"objectID":"Home","href":"CFD_guide/Mesh_sensitivity_study.html#the-tree-structure","title":"CAD model preparation > The tree structure","text":"The tree structure\n\nThe base of the cad tree should be divided into two assemblies. The Vehicle assembly, that contains the car geometry and the BOIs assembly,\nwhich contains then bodies of influence. It is important to have them in separate assemblies as both are treated very differently."},{"objectID":"Home","href":"API_reference/GUI_SubClasses_API/GUI_modules_API_content.html#gui-modules","title":"GUI modules","text":"GUI modules\n\nAn API reference for classes and methods for individual options menus.\n\n"},{"objectID":"Home","href":"GUI_guide/prisms.html#prisms-options-menu","title":"Prisms Options Menu","text":"Prisms Options Menu\n\nPrisms options menu specifies inflation layers (a.k.a. prisms) on specified parts and assemblies. This menu scopies the scoped sizing menu in\nterms of aviable mesh sizings."},{"objectID":"Home","href":"GUI_guide/prisms.html#prism-type","title":"Prisms Options Menu > Prism type","text":"Prism type\n\ntype: switch - string\n\nWhat type of inflation lasyer is to be applied to a given surface. Aviable are uniform, aspect ratio and last ratio.\nfor more info on prism types see Adding Boundary Layers."},{"objectID":"Home","href":"GUI_guide/prisms.html#growth-rate","title":"Prisms Options Menu > Growth rate","text":"Growth rate\n\ntype: text win. - float\n\nA rate of geometric growth of neighboring layers."},{"objectID":"Home","href":"GUI_guide/prisms.html#first-layer-height","title":"Prisms Options Menu > First layer height","text":"First layer height\n\ntype: text win. - float\n\nActive when uniform Prism type is selected. A hight of first prism layer in mm."},{"objectID":"Home","href":"GUI_guide/prisms.html#first-aspect-ratio","title":"Prisms Options Menu > First aspect ratio","text":"First aspect ratio\n\ntype: text win. - float\n\nActive when aspect ratio Prism type is selected. A ratio between surface cell size and first layer height."},{"objectID":"Home","href":"GUI_guide/prisms.html#first-aspect-ratio","title":"Prisms Options Menu > First aspect ratio","text":"First aspect ratio\n\ntype: text win. - float\n\nActive when last ratio Prism type is selected. A ratio between surface cell size and last layer height."},{"objectID":"Home","href":"GUI_guide/prisms.html#number-of-layers","title":"Prisms Options Menu > Number of layers","text":"Number of layers\n\ntype: text win. - integer\n\nTotal number of prism layers."},{"objectID":"Home","href":"GUI_guide/prisms.html#write","title":"Prisms Options Menu > Write…","text":"Write…\n\ntype: button - string\n\nOpens an explorer window through which user saves the current prism and scoped sizing settings into a .json file."},{"objectID":"Home","href":"GUI_guide/prisms.html#update","title":"Prisms Options Menu > Update","text":"Update\n\ntype: button - -\n\nSaves changed parameters for current prism sizing. Needs to be pressed after every change to a prisms."},{"objectID":"Home","href":"GUI_guide/general.html#general-options-menu","title":"General Options Menu","text":"General Options Menu\n\nGeeneral options menu manages system settings such as bumber of preocesses for fluent, paths to input files, Fluent versions,\nGPU selections and other misculaneous settings. This page should contain all relevant options from Fluent launcher window."},{"objectID":"Home","href":"GUI_guide/general.html#solver-precision","title":"General Options Menu > Solver Precision","text":"Solver Precision\n\ntype: switch - string\n\nThis variable is identical to a Double Precision check button in Fluent launcher and makes it possible to switch between\nsingle and double precision solver. Single precision takes up roughly half RAM as double precision solver, but makes larger\nrounding mistakes. Single precision is recomended (especially while using GPU) but users are encuraged to try the difference\non their specific cases."},{"objectID":"Home","href":"GUI_guide/general.html#gpu-or-cpu-solver","title":"General Options Menu > GPU or CPU Solver","text":"GPU or CPU Solver\n\ntype: switch - string\n\nThis variable is identical to a Native GPU Solver check button in Fluent launcher. It gives user an option to solve the case\nusing GPU solver. This dramaticaly accelerates the solution, but high end computational GPU is recomended, as the whole case need\nto fit on GPU RAM (Nvidia A6000 i an example of good GPU for such aplication). With GPU Solver it is still needed to set up\nproper processes count, as CPU is still used for meshing, loading and saving and postprocessing."},{"objectID":"Home","href":"GUI_guide/general.html#solver-processes","title":"General Options Menu > Solver Processes","text":"Solver Processes\n\ntype: text win. - integer\n\nSpecifies number of cores (threads) used by single fluent instance."},{"objectID":"Home","href":"GUI_guide/general.html#turn-on-python-console","title":"General Options Menu > Turn on Python console?","text":"Turn on Python console?\n\ntype: check - bool\n\nWether to start fluent with python console (True) or classical Fluent TUI console (False)."},{"objectID":"Home","href":"GUI_guide/general.html#start-with-gui","title":"General Options Menu > Start with GUI?","text":"Start with GUI?\n\ntype: check - bool\n\nWether to start Fluent instance on background (False) or with Graphical User Interface (True)."},{"objectID":"Home","href":"GUI_guide/general.html#version","title":"General Options Menu > Version","text":"Version\n\ntype: Switch - string\n\nWhich Fluent version to start."},{"objectID":"Home","href":"GUI_guide/general.html#load-entry-msh-file","title":"General Options Menu > Load Entry .msh file…","text":"Load Entry .msh file…\n\ntype: text win. - string\n\nString path to a Entry mesh file that contains loaded geometry of a car. This is so that the entire car geomatry doesnt need to\nbe imported every time only single part or subassembly is changed. This cam be also thought of as current development\nversion of geometry."},{"objectID":"Home","href":"GUI_guide/general.html#parts-to-be-replaced-example","title":"General Options Menu > Parts to be replaced (*example*)…","text":"Parts to be replaced (*example*)…\n\ntype: text win. - string\n\nName of the part or subassembly that needs to be replaced from Entry mesh. For example, if we want to simulate new geometry of\nfront wing subassembly  which is named as FW in CAD tree, it needs to be specified between asterisks  (*)  as *FW*."},{"objectID":"Home","href":"GUI_guide/general.html#load-stp-cad-file","title":"General Options Menu > Load .stp CAD file…","text":"Load .stp CAD file…\n\ntype: text win. - string\n\nPath to a .stp file that contains either a single part or subassembly or entire CAD model, depending on status of\nload full assembly .stp CAD file… check."},{"objectID":"Home","href":"GUI_guide/general.html#load-msh-fluent-mesh-file","title":"General Options Menu > Load .msh Fluent mesh file…","text":"Load .msh Fluent mesh file…\n\ntype: text win. - string\n\nReplaces the Load .stp CAD file… nad takes path of a input volumetric mesh file for starting from solver.\n(in case we already have mesh completed and want to start from solver stage, for example with different settings)"},{"objectID":"Home","href":"GUI_guide/general.html#load-dat-fluent-data-file","title":"General Options Menu > Load .dat Fluent data file…","text":"Load .dat Fluent data file…\n\ntype: text win. - string\n\nPath to a Fluent data file. This option is enabled only when starting from postprocessing stage (for more detailed postpro or\ndiferently placed cuts)"},{"objectID":"Home","href":"GUI_guide/general.html#load-full-assembly-stp-cad-file","title":"General Options Menu > Load full assembly .stp CAD file…","text":"Load full assembly .stp CAD file…\n\ntype: check - bool\n\nWheter to load a single new part or assembly or entire CAD model together with bodies of influence."},{"objectID":"Home","href":"user_guide/solver_setup.html#setting-up-solver","title":"Setting up solver","text":"Setting up solver\n\nPosprocessing options menu gives users options to choose which and how detailed postprocessing features they want to perform for their simulation."},{"objectID":"Home","href":"user_guide/solver_setup.html#export-forces-to-excell-file","title":"Setting up solver > Export forces to excell file?","text":"Export forces to excell file?\n\ntype: check - bool\n\nOption to export drag, lift, and pressure distribution of all subassemblies into a .CSV file."},{"objectID":"Home","href":"CFD_guide/CFD_guide_contents.html#cfd-guide","title":"CFD guide","text":"CFD guide\n\nAn automatisation can help with a lack of experience with specific software (in this case FLuent) or can help to share the simulation settings among the less experienced users.\nBut at the end of the day, the resulting simulation is only as good as its settings and iterpretation. This section should give new CFD engineers a fundamentals of creating\nrobust and useful simulations, that can confidently the vehicle performance."},{"objectID":"Home","href":"CFD_guide/CFD_guide_contents.html#mesh-sensitivity","title":"CFD guide > Mesh sensitivity","text":"Mesh sensitivity\n\nA perfectly precise simulation is possible only with infinite amount of cells. Everything else is a compromise between a precision and computaiton time.\nBefore any CFD development can be started, it is important to tune the fidelity of your mesh to fit this compromise and to quantify the simulation error\ndue to the finite mesh. This proccess is what we call a Mesh sensitivity sudy."},{"objectID":"Home","href":"CFD_guide/CFD_guide_contents.html#turbulence-modeling","title":"CFD guide > Turbulence modeling","text":"Turbulence modeling\n\nFluid flow, unless at small scales or velocities, is a chaotic phenomenon. This chaos is represented by swirls and vortecies at all scales. Some of these larger scales\nare important to describe the general flow, but most of the smaller scales only affect the general flow and are too small to simulate directly. To describe their effect\nwe then need to use  turbulence modeling."},{"objectID":"Home","href":"CFD_guide/CFD_guide_contents.html#useful-guides","title":"CFD guide > Useful guides","text":"Useful guides\n\nHow to Detect Transient Behavior in Steady-State Simulations?\n\nHow to set the Time Step Delta T in Transient CFD Simulations?\n\nExternal Aero Automotive (ABP) - Ansys Learning Hub\n\nFault Tolerant Meshing for Vehicle External Aerodynamics (ABP) - Ansys Learning Hub\n\nExternal Aerodynamics using Ansys Fluent - Ansys Learning Hub\n\nSteady-State and Transient Wake Capturing through Mesh Adaption (ABP) - Ansys Learning Hub"},{"objectID":"Home","href":"GUI_guide/tunnel.html#tunnel-options-menu","title":"Tunnel Options Menu","text":"Tunnel Options Menu\n\nTunnel options menu specifies dimensions of external computational domain (tunnel), tunnel surface mesh size and wrap resolution."},{"objectID":"Home","href":"GUI_guide/tunnel.html#maxmin-x-coordinate-mm","title":"Tunnel Options Menu > Max/Min X Coordinate [mm]","text":"Max/Min X Coordinate [mm]\n\ntype: text win. - integer\n\nMaximum and minimum X coordinate ox tunnel in mm."},{"objectID":"Home","href":"GUI_guide/tunnel.html#maxmin-y-coordinate-mm","title":"Tunnel Options Menu > Max/Min Y Coordinate [mm]","text":"Max/Min Y Coordinate [mm]\n\ntype: text win. - integer\n\nMaximum and minimum Y coordinate ox tunnel in mm."},{"objectID":"Home","href":"GUI_guide/tunnel.html#maxmin-z-coordinate-mm","title":"Tunnel Options Menu > Max/Min Z Coordinate [mm]","text":"Max/Min Z Coordinate [mm]\n\ntype: text win. - integer\n\nMaximum and minimum Z coordinate ox tunnel in mm."},{"objectID":"Home","href":"GUI_guide/tunnel.html#tunnel-surface-cell-size-mm","title":"Tunnel Options Menu > Tunnel Surface Cell Size [mm]","text":"Tunnel Surface Cell Size [mm]\n\ntype: text win. - integer\n\nMaximum surface cell size on surface of tunnel."},{"objectID":"Home","href":"GUI_guide/tunnel.html#resolution-factor","title":"Tunnel Options Menu > Resolution Factor","text":"Resolution Factor\n\ntype: text win. - float\n\nSetting a value less than 1 can help to find holes not aligned to the Cartesian axes by using finer sampling than the given size field.\nIn situations where a hole’s minimum size is larger than the size field’s minimum size, using a Resolution Factor helps to find holes\nwithout modifying the size field. That is, you can use the same size field for both hole fixing and wrapping.\nFor more info see Wrapping Objects"},{"objectID":"Home","href":"getting_started/first_project.html#first-autofluent-project","title":"First AutoFluent project","text":"First AutoFluent project\n\nFirst project can be an included template formula with sizing. Through this we can show entire process of starting a simulation."},{"objectID":"Home","href":"getting_started/first_project.html#working-directory-setup","title":"First AutoFluent project > Working directory setup","text":"Working directory setup\n\nAt the start of every project it is important to setup your working directory. To this directory will fluent write all save files, transcripts as well as all results.\nWe can either write tha path to our desired directory into a text file or we can navigate to it (or create it) through explorer window by pressing on Open… button\nnext to a Working directory text."},{"objectID":"Home","href":"getting_started/first_project.html#cad-import","title":"First AutoFluent project > CAD import","text":"CAD import\n\nThere are two ways to import CAD file into AutoFluent, partial and full. Here we are gonna import a full CAD, meaning the CAD file contains the entire car geometry and\nBodies Of Influence. First a Load full assembly .stp CAD file… check has to be activated. This switches to full CAD import. Then through Open… button or py pasting\nthe path to a .stp file choose the formula.stp file located in the Example folder."},{"objectID":"Home","href":"getting_started/first_project.html#system-settings","title":"First AutoFluent project > System settings","text":"System settings\n\nAs every computer has different specifications, we have to set apropriate system settings. These include number of aviable nodes (cores) and wether we want\nto simulate on CPU or GPU (only for high-end computaional GPUs). First choose number of solver processes which is smaller than number of CPU cores in your computer\nand then depending on your GPU and RAM (or GPU RAM) set precision and type of solver (single precision uses much less RAM with negligible influence on precision)."},{"objectID":"Home","href":"getting_started/first_project.html#mesh-sizing","title":"First AutoFluent project > Mesh sizing","text":"Mesh sizing\n\nWe can either specify scoped sizing directly in GUI or load a .json file containing all mesh sizing iformations. In Example folder there already is such file\nwhich has all mesh setting properly named according to STEP file tree (details in User Guide) so we can use that. In top select menu go to Scoped sizing menu and press\nOpen… button. In expoler go to example folder and choose Scoped_sizing_formula.json file. In left sidebar you can see a tree with mesh sizings. Feel free to compare\nit with a CAD tree. Prisms settings are also included in said file."},{"objectID":"Home","href":"getting_started/first_project.html#boundary-conditions","title":"First AutoFluent project > Boundary conditions","text":"Boundary conditions\n\nIn top select menu Boundary conditions tab we can chose inlet air velocity, wheel diameter and wheel base. These can be left as default. Since we loaded scoped sizing\nwithout fans, we need to disable fans in our computation. Uncheck the Simulate fan? check. Also feel free to try leaving it on, but remember to select a Scoped_sizing_formula_fan.json\nsizing file."},{"objectID":"Home","href":"getting_started/first_project.html#additional-settings","title":"First AutoFluent project > Additional settings","text":"Additional settings\n\nAs it is, the simualtion is ready to be sent for computing, since all the default values are set for the example model. We might be compelled to change some settings though."},{"objectID":"Home","href":"getting_started/first_project.html#-of-iterations","title":"First AutoFluent project > # of iterations","text":"# of iterations\n\nBy default the number of iterations is set to 1500. This might be unecessary high and its decrease could reduce the computation time drastically, especially if you computate\non slow CPU. In top select menu go to Simulation menu and change the value next to Number of iterations text. Here we can also change turbulence settings and temporal\nsettings."},{"objectID":"Home","href":"getting_started/first_project.html#postprocessing","title":"First AutoFluent project > Postprocessing","text":"Postprocessing\n\nBy default the postprocessing creates 5 .AVZ scenes and 444!!! cuts (pictures). This takes a lot of time so feel free to reduce the number of cuts or disable some\ntypes of cuts."},{"objectID":"Home","href":"getting_started/first_project.html#start-calculation","title":"First AutoFluent project > Start calculation","text":"Start calculation\n\nAfter finishing setting up of simulation we can push theese settings to simulation queue by pressing Start simulation button. If there is place for it\n(as it should with our first project) the case will quicly change from waiting status to meshing status and Fluent instance will be created.\nIf all dependencies are installed and all settings set properly, entire simulation should run from start to end and in working directory results folder will be created."},{"objectID":"Home","href":"API_reference/GUI_SubClasses_API/GUI_Tunnel_API.html#tunnel","title":"Tunnel","text":"Tunnel\n\nModule servicing the Tunnel options menu as well as tunnel settings object.\n\n\n\nclass GUI_Tunnel.TunnelSett\n\nBases: Setting\n\nClass containing settings regarding size, cell size of tunnel and wrap settings.\n\nMethods:\n\n\n\n\n\n__init__()\n\nDefault tunnel data initialisation.\n\n\n\nclass GUI_Tunnel.Tunnel(parent, controller)\n\nBases: CTkFrame\n\nctk.CTkFrame class servicing the Tunnel settings menu.\n\nMethods:\n\n\n\n\n\n__init__(parent, controller)\n\nFrame initialisation and features placement.\n\n\n\nTurn_Switch()\n\n"},{"objectID":"Home","href":"API_reference/PyFluent_scripts_API/PyFluent_scripts_API_contents.html#pyfluent-scripts","title":"PyFluent Scripts","text":"PyFluent Scripts\n\nScripts that manages the automation workflows of meshing, solver and postprocessing.\n\n"},{"objectID":"Home","href":"API_reference/GUI_SubClasses_API/GUI_ScopedSizing_API.html#scoped-sizing","title":"Scoped Sizing","text":"Scoped Sizing\n\nModule servicing the scoped sizing options menu as well as loading and writing the mesh sizing .json files.\n\n\n\nclass GUI_ScopeSizing.ScopeSizing(parent, controller)\n\nBases: CTkFrame\n\nctk.CTkFrame class servicing the Scope Sizing settings menu.\n\nMethods:\n\n\n\n\n\n__init__(parent, controller)\n\nFrame initialisation and features placement.\n\n\n\nbrowseFiles()\n\nOpen an explorer window and reads a path to a selected .JSON mesh sizing file.\n\n\n\nReadScopeFile()\n\nCreates a dictionary with MSH_Objects from a loaded .JSON scope sizing file.\n\n\n\nOnClickTree(event)\n\nSwitches the mesh sizing settings based on object that is clicked in the scoped sizing tree.\n\n\n\nupdateValues()\n\nUpdates the curently shown settings.\n\n\n\ndisableCurvProx(select)\n\nDisables or enables proximity and curvature settings based on mesh sizing type.\n\n\n\nwriteScopeSizeFile()\n\nOpens an explorer window and creates a .JSON file.\n\n\n\naddChildToTree()\n\nAdds a new child scoped sizing under selected object in tree."},{"objectID":"Home","href":"index.html#autofluent","title":"AutoFluent","text":"AutoFluent\n\n\n\nThis project aims to incorporate pyFluent (a python Fluent wrapper) into a user friendly and easy to use graphical interface.\nAs a result aerodynamicists with little experience in making CFD calculations can create quality external car simulations.\nAt first the project aimed to create complete automatic workflow from importing a CAD file to getting complete results with\ndrag/lift data and pictures but over time it incorporated feeatures as automatic simulations queue, radiators and fans and turn simulations."},{"objectID":"Home","href":"index.html#why-use-autofluent","title":"AutoFluent > Why Use AutoFluent?","text":"Why Use AutoFluent?\n\nAutomation: Fully atomated workflow from CAD to results.\n\nEase of use: User friendly and simplified interface over Fluent.\n\nSimulation speed: Fully use both CPU and GPU resources at all time thanks to sim queue.\n\nFlexibility: Many options for solver settings, postprocessing, mesh sizings and presets saving."},{"objectID":"Home","href":"index.html#how-it-works","title":"AutoFluent > How it works?","text":"How it works?\n\nThrough GUI user can load CAD files, create or load mesh sizings and choose solver and postprocessing option.\nGUI then sends selected settings into a simulation queue, which automatically sends these settings into a\npyFluent script. The sctipt requires that the imported CAD tree is named in accordance with a .json scoped sizing file\ncreated through GUI."},{"objectID":"Home","href":"index.html#compatibility","title":"AutoFluent > Compatibility","text":"Compatibility\n\nAutoFluent supports Ansys Fluent 2024 R2 and later."},{"objectID":"Home","href":"index.html#resources","title":"AutoFluent > Resources","text":"Resources\n\nPyFluent documentation\n\nFluent documentation\n\nAnsys customer portal"},{"objectID":"Home","href":"index.html#need-help","title":"AutoFluent > Need Help?","text":"Need Help?\n\nVisit the community or support resources:\n\nPyAnsys community forum\n\nSubmit a bug report\n\nContact Ansys support"},{"objectID":"Home","href":"user_guide/user_guide_contents.html#user-guide","title":"User Guide","text":"User Guide\n\n\n\nThis AutoFluent user guide should help you understand principles of working with AutoFluent as well as some basic principles of creating\nCFD simulations of acceptable quality."},{"objectID":"Home","href":"user_guide/user_guide_contents.html#setting-up-cad-geometry","title":"User Guide > Setting up CAD geometry","text":"Setting up CAD geometry\n\nAutoFluent uses tree hierarchy of imported CAD geometry to create named selections, mesh sizings and output variables.\nAs such, a rigorous CAD naming conventions during development needs to be ahered to."},{"objectID":"Home","href":"user_guide/user_guide_contents.html#mesh-creation","title":"User Guide > Mesh creation","text":"Mesh creation\n\nEven though AutoFluent automises entire Fluent Fault tolerant workflow, a propper mesh sizings needs to be defined. AutoFluent offers\nan intuitive GUI tool to create mesh sizing settings .json files that offers repeatibility in creating quality volumetric meshes."},{"objectID":"Home","href":"user_guide/user_guide_contents.html#solver-setup","title":"User Guide > Solver setup","text":"Solver setup\n\nAutoFluent offers an useful range of turbulence models, slovers, algorithms and temporal settings. This offers a variability in speed and\ncomplexity of simulations but knowing how to set up the solver based on desired output, aviable hardvare and used mesh\nis essential."},{"objectID":"Home","href":"user_guide/user_guide_contents.html#boundary-conditions","title":"User Guide > Boundary conditions","text":"Boundary conditions\n\nApart from inlet velocity AutoFluent offers a posibility to set up your wheel base and incorporate a radiator or fans into your simulation.\nA propper setup of these boundaries defines the simulation and provides an usefull input to other groups such as\npowertrain."},{"objectID":"Home","href":"user_guide/user_guide_contents.html#postprocessing","title":"User Guide > Postprocessing","text":"Postprocessing\n\nMost important part of any simulation is evaluating its results and making sure the results can be trusted. In postprocessing stage of\nAutoFluent the user can hoose which data and how detailed he wants to be shown."},{"objectID":"Home","href":"API_reference/API_contents.html#api_reference","title":"API_reference","text":"API_reference\n\nAn API reference for custom functions and classes used in automatisation script for easier own development.\n\n"},{"objectID":"Home","href":"CFD_guide/Turbulence.html#cad-model-preparation","title":"CAD model preparation","text":"CAD model preparation\n\nIt is crutial to maintain a good naming system of your CAD geometry and to adhere to certain rules when naming your parts and assemblies.\nThe pyfluent script takes yopur imported CAD and renames each part and assembly so that it contains also name of its entire CAD tree hierarchy.\nThis enables us to find the correct parts even if part with same name exists in different assembly and allow us to assign mesh sizings to entire\nassemblies without needing to specify them for each part."},{"objectID":"Home","href":"CFD_guide/Turbulence.html#the-tree-structure","title":"CAD model preparation > The tree structure","text":"The tree structure\n\nThe base of the cad tree should be divided into two assemblies. The Vehicle assembly, that contains the car geometry and the BOIs assembly,\nwhich contains then bodies of influence. It is important to have them in separate assemblies as both are treated very differently."},{"objectID":"Home","href":"API_reference/GUI_SubClasses_API/GUI_Postprocessing_API.html#postprocessing","title":"Postprocessing","text":"Postprocessing\n\nModule servicing the postprocessing options menu as well as postprocessing settings object.\n\n\n\nclass GUI_Postprocess.PostprocessSett\n\nBases: Setting\n\nClass containing posprocessing settings of exported data ad pictures.\n(Excell table, .AVZ scenes, contour cuts, etc.).\n\nMethods:\n\n\n\n\n\n__init__()\n\nAssigns default values.\n\n\n\nclass GUI_Postprocess.Postprocessing(parent, controller)\n\nBases: CTkFrame\n\nctk.CTkFrame class servicing the Postprocessing settings menu.\n\nMethods:\n\n\n\n\n\n__init__(parent, controller)\n\nConstruct a frame widget with the parent MASTER.\n\nValid resource names: background, bd, bg, borderwidth, class,\ncolormap, container, cursor, height, highlightbackground,\nhighlightcolor, highlightthickness, relief, takefocus, visual, width.\n\n\n\nExcell_var_change()\n\nEnable or disable Excell data file generation.\n\n\n\nReport_var_change()\n\nEnable or disable report file generation.\n\n\n\nAVZ_var_change()\n\nEnable or disable .AVZ scene file generation.\n\n\n\nVelMag_var_change()\n\nEnable or disable velocity magnitude contour cuts generation.\n\n\n\nVelLIC_var_change()\n\nEnable or disable velocity Line Integral Convolution cuts generation.\n\n\n\nMeanPress_var_change()\n\nEnable or disable mean pressure contour cuts generation.\n\n\n\nTotPress_var_change()\n\nEnable or disable total pressure contour cuts generation.\n\n\n\nVorticity_var_change()\n\nEnable or disable vorticity contour cuts generation."},{"objectID":"Home","href":"API_reference/GUI_SubClasses_API/GUI_BoundaryConditions_API.html#boundary-conditions","title":"Boundary Conditions","text":"Boundary Conditions\n\nModule servicing the boundary conditions options menu as well as boundary conditions settings object.\n\n\n\nclass GUI_BoundaryConditions.Boundary_conditions_sett(velocity=0, WheelDiameter=0, f_w_axis_x=0, f_w_axis_y=0, f_w_axis_z=0, r_w_axis_x=0, r_w_axis_y=0, r_w_axis_z=0, rad_check=True, c_0=0, c_1=0, porosity=0, Fan_2D_check=True)\n\nBases: Setting\n\nClass containing boundary conditions settings of surface and cell zones.\n(velocity inlet, radiator porous media, 2D Fan setting, etc.).\n\nMethods:\n\n\n\n\n\n__init__(velocity=0, WheelDiameter=0, f_w_axis_x=0, f_w_axis_y=0, f_w_axis_z=0, r_w_axis_x=0, r_w_axis_y=0, r_w_axis_z=0, rad_check=True, c_0=0, c_1=0, porosity=0, Fan_2D_check=True)\n\nAssigns default values.\n\n\n\nclass GUI_BoundaryConditions.BoundaryConditions(parent, controller)\n\nBases: CTkFrame\n\nctk.CTkFrame class servicing the Boundary Conditions settings menu.\n\nMethods:\n\n\n\n\n\n__init__(parent, controller)\n\nFrame initialisation and features placement.\n\n\n\nRadiator_var_change()\n\nEnable or disable the radiator settings.\n\n\n\nFan_2D_var_change()\n\nEnable or disable the fan settings.\n\n\n\nbrowseFilesData()\n\nOpens an explorer window and puts the path to a fan .txt data file to a BoundarySett.Fan_2D_curve_Path attribute."}]